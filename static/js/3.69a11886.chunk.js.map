{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","maxLength15","maxLengthCreator","AddMessageReduxForm","reduxForm","form","props","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","type","validate","required","Dialogs","dialogs","dialogsPage","messages","className","s","dialogsItems","map","d","dialog","active","src","img","alt","m","message","id","data","sendNewMessage","newMessageBody","compose","connect","state","getDialogsPage","dispatch","sendMessageAC","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,yICM/MC,EAAcC,YAAiB,KAsC5B,IAaMC,EAAsBC,YAA2B,CAC1DC,KAAM,WADyBD,EAbL,SAACE,GAC3B,OACI,uBAAMC,SAAUD,EAAME,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,YAAa,qBACbC,KAAK,iBACLC,UAAWC,IACXC,KAAM,OACNC,SAAU,CAACC,IAAUf,KAC5B,gDAQGgB,EApDR,SAAiBX,GACpB,IAGIY,EAAUZ,EAAMa,YAAYD,QAC5BE,EAAWd,EAAMa,YAAYC,SACjC,OACI,sBAAKC,UAAWC,IAAEJ,QAAlB,UACI,qBAAKG,UAAWC,IAAEC,aAAlB,SAEQL,EAAQM,KAAI,SAAAC,GACR,OACI,sBAAKJ,UAAWC,IAAEI,OAAS,IAAMJ,IAAEK,OAAnC,UACKF,EAAEd,KACH,qBAAKiB,IAAKH,EAAEI,IAAKC,IAAK,mBAI1C,sBAAKT,UAAWC,IAAEF,SAAlB,UAEQA,EAASI,KAAI,SAAAO,GACT,OACI,qBACKV,UAAWC,IAAEI,OADlB,SAEKK,EAAEC,SAFGD,EAAEE,OAKxB,cAAC9B,EAAD,CAAqBI,SA1BT,SAAC2B,GACrB5B,EAAM6B,eAAeD,EAAKE,0B,iBCmBnBC,sBACXC,aAboB,SAACC,GACrB,MAAO,CACHpB,YAAaqB,YAAeD,OAGT,SAACE,GACxB,MAAO,CACHN,eAAgB,SAACC,GACbK,EAASC,YAAcN,SAM/BO,IAFWN,CAGbpB","file":"static/js/3.69a11886.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1qI3Z\",\"dialog\":\"Dialogs_dialog__37WKc\",\"dialogsItems\":\"Dialogs_dialogsItems__1-Abt\",\"active\":\"Dialogs_active__1IQwU\",\"messages\":\"Dialogs_messages__1tOMp\",\"message\":\"Dialogs_message__1884l\"};","import React from 'react';\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from \"../../assets/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nlet maxLength15 = maxLengthCreator(100)\r\n\r\nexport function Dialogs(props: DialogsPropsType) {\r\n    let addNewMessageBody = (data: FormMessageType) => {\r\n        props.sendNewMessage(data.newMessageBody)\r\n    }\r\n    let dialogs = props.dialogsPage.dialogs\r\n    let messages = props.dialogsPage.messages\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {\r\n                    dialogs.map(d => {\r\n                        return (\r\n                            <div className={s.dialog + \" \" + s.active}>\r\n                                {d.name}\r\n                                <img src={d.img} alt={'people'}/>\r\n                            </div>)\r\n                    })}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {\r\n                    messages.map(m => {\r\n                        return (\r\n                            <div key={m.id}\r\n                                 className={s.dialog}>\r\n                                {m.message}\r\n                            </div>)\r\n                    })}\r\n                <AddMessageReduxForm onSubmit={addNewMessageBody}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormMessageType = {\r\n    newMessageBody: string\r\n}\r\nexport const AddMessageForm = (props: InjectedFormProps<FormMessageType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder={'Enter your message'}\r\n                   name='newMessageBody'\r\n                   component={Textarea}\r\n                   type={'text'}\r\n                   validate={[required, maxLength15,]}/>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<FormMessageType>({\r\n    form: 'dialogs'\r\n})(AddMessageForm)\r\nexport default Dialogs;\r\n\r\n","import React from 'react';\r\nimport {InitialStateType, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirects';\r\nimport {getDialogsPage} from '../../redux/select'\r\n\r\n\r\nexport type MapStatePropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\nexport type MapDispatchPropsType = {\r\n    sendNewMessage: (newMessageBody: string) => void\r\n}\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {   // AppStateType это type всего нашего state!!! и возвращает частичку state из редьюсера\r\n    return {\r\n        dialogsPage: getDialogsPage(state),\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {   //dispatch импортируем из redux\r\n    return {\r\n        sendNewMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs)\r\n\r\n\r\n\r\n"],"sourceRoot":""}