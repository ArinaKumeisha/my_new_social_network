{"version":3,"sources":["utils/validators/validators.tsx","components/Header/Header.module.css","components/Profile/myPosts/Post/post.module.css","redux/profile-reducer.ts","assets/FormsControls.tsx","hoc/WithAuthRedirects.tsx","redux/dialogs-reducer.ts","components/Profile/ProfileInfo/ProfileData/ProfileData.module.css","components/Profile/myPosts/MyPosts.module.css","redux/select.tsx","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/Settings/Music.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","redux/users-reducer.ts","assets/image/prelo.webp","components/preloader/preloader.jsx","locale/en_US.js","assets/common/Paginator.tsx","assets/image/avatar.png","components/Users/EveryUser.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/New/new-reducer.tsx","components/New/New.tsx","redux/app-reducer.ts","components/Login/LoginFormik.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","assets/image/city.jpg","components/Profile/ProfileInfo/Contacts.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/myPosts/Post/Post.tsx","components/Profile/myPosts/MyPosts.tsx","components/Profile/myPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","App.tsx","hoc/WithSuspense.tsx","redux/redux_store.ts","index.tsx","api/api.ts","components/Navbar/Navbar.module.css","assets/FormsControls.module.css","components/Users/user.module.css","assets/common/common.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","ACTION_TYPE","initialState","profile","status","newPostText","posts","id","message","likeCount","img","error","profileReducer","state","action","type","ADD_POST","newPost","Date","getTime","newMessagePost","DELETE_POST","filter","p","postId","SET_STATUS","SET_USER_PROFILE_SUCCESS","SAVE_PHOTO","photos","SET_ERROR","addPostAC","deletePostAC","setStatusAC","getUserStatus","userId","dispatch","a","profileAPI","getStatus","response","data","Error","savePhotoAC","setUserProfile","getUserProfile","updateStatus","resultCode","console","log","savePhoto","saveProfile","getState","auth","messages","Textarea","props","input","meta","hasError","touched","className","s","container","formControl","mapStateToProps","isAuth","withAuthRedirect","Component","connect","restProps","to","dialogs","name","dialogsReducer","SEND_MESSAGE","nextMessage","newMessageBody","sendMessageAC","getDialogsPage","dialogsPage","getIsAuth","getLogin","login","getProfile","profilePage","getId","getPosts","getUsers","usersPage","users","getUsersFilter","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getError","createSelector","u","Navbar","nav","item","activeClassName","activeLink","Music","Settings","Header","header","src","alt","loginBlock","onClick","logOut","email","messageError","captchaUrl","success","GET_USER_DATA_SUCCESS","payload","setError","PROFILE_SET_ERROR","getAuthUserData","authAPI","me","res","getCaptchaUrl","securityAPI","getCaptcha","url","GET_CAPTCHA","HeaderContainer","this","React","connector","term","friend","followSucces","userID","FOLLOW_SUCCES","unFollowSuccess","UN_FOLLOW_SUCCESS","setCurrentPage","SET_CURRENT_PAGE","toggleIsFetching","TOGGLE_IS_FETCHING","toggleIsFollowingProgress","TOGGLE_IS_FOLLOWING_PROGRESS","setFilterAC","SET_FILTER","followUnFollow","method","actionCreator","Preloader","prelo","style","width","items_per_page","jump_to","jump_to_confirm","page","prev_page","next_page","prev_5","next_5","prev_3","next_3","Paginator","onPageHandler","showTitle","defaultCurrent","total","onChange","e","defaultPageSize","locale","localeInfo","EveryUser","user","follow","unFollow","common","photo","small","avatar","followAndDescription","left","followed","disabled","some","commonBtn","right","validateForm","values","UsersSearchForm","memo","initialValues","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","Users","map","UsersContainer","pageNumber","requestUsers","compose","usersAPI","bind","items","SET_USERS","totalCount","SET_TOTAL_USER_COUNT","count","messageForState","NewReduxForm","reduxForm","form","handleSubmit","Field","component","NewForm","useDispatch","selector","useSelector","new","messageForm","inputform","inicialized","errors","password","test","LoginFormik","formik","useFormik","rememberMe","captcha","resetForm","Grid","justifyContent","FormControl","FormLabel","href","FormGroup","TextField","getFieldProps","color","FormControlLabel","label","control","Checkbox","handleChange","checked","Button","variant","ProfileStatusWithHooks","useState","editMode","setEditeMode","setStatus","useEffect","currentTarget","onBlur","autoFocus","onDoubleClick","Contacts","information","contactTitle","contactValue","ProfileData","activateEditeMode","isOwner","contacts","info","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","c","ProfileDataForm","submit","SignupSchema","Yup","shape","min","max","facebook","youtube","website","vk","twitter","mainLink","instagram","github","large","validationSchema","placeholder","checkBox","ProfileInfo","phone","block","target","files","description","Post","maxLength10","MyPosts","postElements","postBlock","PostReduxForm","addPost","MyPostsContainer","deletePost","Profile","ProfileContainer","match","params","history","push","refreshProfile","prevProps","prevState","snapshot","withRouter","DialogsContainer","lazy","App","inicializedApp","exact","path","render","Suspense","fallback","New","app","then","INITIALIZED_SUCCESS","rootReducer","combineReducers","formReducer","newMessage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleWare","version","ReactDOM","document","getElementById","instance","axios","create","baseURL","withCredentials","headers","get","post","delete","put","photoFile","formData","FormData","append"],"mappings":"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","file":"static/js/main.b76ad2d6.chunk.js","sourcesContent":["\r\nexport const required = (value: string) => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n    return (value: string) => {\r\n        if (value.length > maxLength ) return `max length with ${maxLength} symbols`\r\n        return undefined\r\n\r\n    }}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3R7w-\",\"loginBlock\":\"Header_loginBlock__30zcL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__1NA5u\",\"message\":\"post_message__3PuBy\"};","import {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../api/api\";\r\nimport {ContactsType, PhotosType, PostsType, ProfilesType} from \"../types/types\";\r\nimport {AppThunk} from \"./redux_store\";\r\n\r\nexport enum ACTION_TYPE {\r\n    ADD_POST = \"PROFILE/ADD-POST\",\r\n    SET_STATUS = \"PROFILE/SET_STATUS\",\r\n    DELETE_POST = \"PROFILE/DELETE-POST\",\r\n    SET_USER_PROFILE_SUCCESS = \"PROFILE/SET_USER_PROFILE_SUCCESS\",\r\n    SEND_MESSAGE = \"DIALOGS/SEND-MESSAGE\",\r\n    FOLLOW_SUCCES = \"USERS/FOLLOW_SUCCES\",\r\n    UN_FOLLOW_SUCCESS = \"USERS/UN_FOLLOW_SUCCESS\",\r\n    SET_USERS = \"USERS/SET_USERS\",\r\n    SET_CURRENT_PAGE = \"USERS/SET_CURRENT_PAGE\",\r\n    SET_TOTAL_USER_COUNT = \"USERS/SET-TOTAL_USER_COUNT\",\r\n    TOGGLE_IS_FETCHING = \"USERS/TOGGLE-IS-FETCHING\",\r\n    TOGGLE_IS_FOLLOWING_PROGRESS = \"USERS/TOGGLE-IS_FOLLOWING-PROGRESS\",\r\n    SET_FILTER = \"USERS-SET-FILTER\",\r\n    GET_USER_DATA_SUCCESS = \"AUTH/ACTION_TYPE.GET_USER_DATA_SUCCESS\",\r\n    INITIALIZED_SUCCESS = \"APP/INITIALIZED-SUCCESS\",\r\n    SAVE_PHOTO = \"PROFILE/SAVE-PHOTO\",\r\n    SET_ERROR=\"PROFILE/SET-ERROR\",\r\n    GET_CAPTCHA= \"AUTH/GET-CAPTCHA\",\r\n    PROFILE_SET_ERROR=\"AUTH/SET-ERROR\",\r\n\r\n}\r\n\r\n\r\nexport type ProfileActionType =\r\n    AddPostAT |\r\n    setUserProfileSuccessAT |\r\n    SetStatusAT |\r\n    DeletePostAT |\r\n    SavePhotoAT |\r\n    SetErrorAT\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    profile: null as ProfilesType | null,\r\n    status: '',\r\n    newPostText: '',\r\n    posts: [\r\n        {\r\n            id: 2,\r\n            message: \"Hello, how are you?\",\r\n            likeCount: 15,\r\n            img: \"https://www.fotoprizer.ru/img_inf/st_221.jpg\"\r\n        },\r\n        {\r\n            id: 1,\r\n            message: \"It's my first post\",\r\n            likeCount: 18,\r\n            img: \"https://www.fotoprizer.ru/img_inf/st_221.jpg\"\r\n        },\r\n    ] as Array<PostsType>,\r\n    error: null as null | string\r\n}\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.ADD_POST:\r\n            const newPost: PostsType = {\r\n                id: new Date().getTime(),\r\n                message: action.newMessagePost,\r\n                likeCount: 0,\r\n                img: \"https://www.fotoprizer.ru/img_inf/st_221.jpg\",\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [newPost, ...state.posts],\r\n            }\r\n        case ACTION_TYPE.DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        }\r\n\r\n        case ACTION_TYPE.SET_STATUS:\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case ACTION_TYPE.SET_USER_PROFILE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case ACTION_TYPE.SAVE_PHOTO:\r\n            if (state.profile) {\r\n                return {...state, profile: {...state.profile, photos: action.photos}}\r\n            }\r\n            return {...state}\r\n        case ACTION_TYPE.SET_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport type AddPostAT = {\r\n    type: ACTION_TYPE.ADD_POST,\r\n    newMessagePost: any\r\n}\r\nexport type setUserProfileSuccessAT = {\r\n    type: ACTION_TYPE.SET_USER_PROFILE_SUCCESS,\r\n    profile: ProfilesType | null\r\n}\r\nexport type SetStatusAT = {\r\n    type: ACTION_TYPE.SET_STATUS,\r\n    status: string,\r\n}\r\nexport type SetErrorAT = ReturnType<typeof setError>\r\n\r\nexport const addPostAC = (newMessagePost: string): AddPostAT => {\r\n    return {\r\n        type: ACTION_TYPE.ADD_POST,\r\n        newMessagePost,\r\n    } as const\r\n}\r\nexport type DeletePostAT = ReturnType<typeof deletePostAC>\r\nexport const deletePostAC = (postId: number) => {\r\n    return {\r\n        type: ACTION_TYPE.DELETE_POST,\r\n        postId,\r\n    } as const\r\n}\r\n\r\nexport const setStatusAC = (status: string): SetStatusAT => {\r\n    return {\r\n        type: ACTION_TYPE.SET_STATUS,\r\n        status,\r\n    } as const\r\n}\r\nexport const setUserProfileSuccess = (profile: ProfilesType) => {\r\n    return {\r\n        type: ACTION_TYPE.SET_USER_PROFILE_SUCCESS,\r\n        profile,\r\n    } as const\r\n}\r\nexport const setError=(error: string | null)=>{\r\n    return ({type:ACTION_TYPE.SET_ERROR, error} as const)\r\n}\r\n\r\nexport const getUserStatus = (userId: string) => async (dispatch: Dispatch<ProfileActionType>) => {\r\n    try {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatusAC(response.data))\r\n    } catch (e) {\r\n        throw  Error\r\n    }\r\n}\r\nexport type SavePhotoAT = ReturnType<typeof savePhotoAC>\r\nexport const savePhotoAC = (photos: PhotosType) => {\r\n    return {\r\n        type: ACTION_TYPE.SAVE_PHOTO,\r\n        photos,\r\n    } as const\r\n}\r\nexport const setUserProfile = (userId: string) => async (dispatch: Dispatch<ProfileActionType>) => {\r\n    try {\r\n        const response = await profileAPI.getUserProfile(userId)\r\n        dispatch(setUserProfileSuccess(response.data))\r\n    } catch (e) {\r\n        throw  Error\r\n    }\r\n}\r\n\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        try {\r\n            const response = await profileAPI.updateStatus(status)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatusAC(status))\r\n            }\r\n        } catch (error: any) {\r\n            console.log(error.message)\r\n        }\r\n    }\r\n}\r\nexport const savePhoto = (photos: PhotosType) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        try {\r\n            const response = await profileAPI.savePhoto(photos)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(savePhotoAC(response.data.data.photos))\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\nexport type SaveProfileType = {\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n}\r\nexport const saveProfile = (profile: ProfilesType): AppThunk => {\r\n    return async (dispatch, getState) => {\r\n        const userId = getState().auth.id\r\n        try {\r\n            const response = await profileAPI.saveProfile(profile)\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(setUserProfile(userId))\r\n            }else{\r\n                dispatch(setError(response.data.messages[0]))\r\n            }\r\n        } catch (e: any) {\r\n            console.log(e.message)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta} = props\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n                <input {...input}/>\r\n                {hasError && <span className={`${s.formControl} ${s.error}`}>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta} = props\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n                <textarea {...input}{...props}/>\r\n                {hasError && <span className={`${s.formControl} ${s.error}`}>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux_store';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!props.isAuth) return <Redirect to={'login'}/>\r\n        return <Component  {...restProps as T}/>\r\n    }\r\n\r\n    return  connect(mapStateToProps)(RedirectComponent)\r\n\r\n}\r\n\r\n","import { DialogsType, MessagesType } from \"../types/types\";\r\nimport {ACTION_TYPE} from \"./profile-reducer\";\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type DialogActionType = SendMessageAT\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"Marina\",\r\n            img: \"https://video-pricheski.ru/photo/img/foto-devushek-s-korotkoi-strizhkoi-dlia-avy-3.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Alina\",\r\n            img: \"https://bipbap.ru/wp-content/uploads/2017/05/370.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Alex\",\r\n            img: \"https://prikolnye-kartinki.ru/img/picture/Aug/23/f0b9e5a7d4b40ce999e2ba9b4e4d1b39/2.jpg\"\r\n        },\r\n        {id: 4, name: \"Viktor\", img: \"https://87.img.avito.st/640x480/8817015087.jpg\"},\r\n        {\r\n            id: 6,\r\n            name: \"Anna\",\r\n            img: \"https://i.pinimg.com/originals/b2/95/45/b29545916fbf406f7cec10ff1845a191.jpg\"\r\n        },\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: \"How are you?\"},\r\n        {id: 2, message: \"Hello\"},\r\n        {id: 3, message: \"Yo\"},\r\n    ] as Array<MessagesType>,\r\n}\r\n\r\n\r\nexport const dialogsReducer = (state = initialState, action: DialogActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SEND_MESSAGE:\r\n            const nextMessage: MessagesType = {\r\n                id: new Date().getTime(),\r\n                message: action.newMessageBody\r\n            }\r\n\r\n            return {\r\n                ...state, messages: [nextMessage, ...state.messages],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype SendMessageAT = {\r\n    type: ACTION_TYPE.SEND_MESSAGE,\r\n    newMessageBody: string\r\n}\r\nexport const sendMessageAC = (newMessageBody: string): SendMessageAT => {\r\n    return (\r\n        {\r\n            type: ACTION_TYPE.SEND_MESSAGE,\r\n            newMessageBody,\r\n        }\r\n    ) as const\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ProfileData_info__1Zk26\",\"error\":\"ProfileData_error__2FDlO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__KDQqq\",\"posts\":\"MyPosts_posts__2CrWm\"};","import {AppStateType} from \"./redux_store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nexport const getDialogsPage = (state: AppStateType) => {\r\n    return state.dialogsPage\r\n}\r\n\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const getLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}\r\n\r\nexport const getProfile = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n}\r\nexport const getStatus = (state: AppStateType) => {\r\n    return state.profilePage.status\r\n}\r\nexport const getId = (state: AppStateType) => {\r\n    return state.auth.id\r\n}\r\nexport const getPosts = (state: AppStateType) => {\r\n    return state.profilePage.posts\r\n}\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\nexport const getUsersSuper = createSelector(\r\n    getUsers, (users) => {                                        // из библиотеки reselect!\r\n        return users.filter(u => true)\r\n    })\r\nexport const getError = (state: AppStateType)=>{\r\n    return state.profilePage.error\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Navbar.module.css\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/new\" activeClassName={s.activeLink}>New</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n        </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/friends\" activeClassName={s.activeLink}>Friends</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n        </nav>\r\n)\r\n}\r\nexport default Navbar;\r\n\r\n","import React from 'react';\r\n\r\nexport const Music= () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music;","import React from 'react';\r\n\r\nexport const Settings= () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Header.module.css\"\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logOut: () => void\r\n\r\n}\r\n const Header  = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n        <img src ='https://i1.7fon.org/thumb/z134398.jpg' alt ='label'/>\r\n            <div className={s.loginBlock}>\r\n                { props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logOut}>Log out</button></div>\r\n                    : <NavLink to={\"./login\"}>Login</NavLink> }\r\n            </div>\r\n    </header>\r\n    )}\r\nexport default Header;\r\n","import {ACTION_TYPE} from \"./profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, securityAPI} from \"../api/api\";\r\nimport {AppThunk} from \"./redux_store\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {GetAuthUserType} from \"../types/types\";\r\n\r\n\r\nexport const initialState = {\r\n    id: '',\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    messageError: null as string | null,\r\n    captchaUrl: null as string | null,\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type AuthActionType = SuccessType | FormAction | getCaptchaUrlSuccessType | SetErrorType\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.GET_USER_DATA_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case ACTION_TYPE.GET_CAPTCHA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case ACTION_TYPE.PROFILE_SET_ERROR:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype SuccessType = {\r\n    type: ACTION_TYPE.GET_USER_DATA_SUCCESS,\r\n    payload: GetAuthUserType\r\n}\r\nexport const success = (id: string, email: string | null, login: string | null, isAuth: boolean): SuccessType => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.GET_USER_DATA_SUCCESS,\r\n        payload: {id, email, login, isAuth,}\r\n    }\r\n}\r\ntype getCaptchaUrlSuccessType = ReturnType<typeof getCaptchaUrlSuccess>\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string | null) => ({\r\n    type: ACTION_TYPE.GET_CAPTCHA,\r\n    payload: {captchaUrl}\r\n} as const)\r\n\r\nexport type SetErrorType = ReturnType<typeof setError>\r\nexport const setError = (messageError: string) => ({type: ACTION_TYPE.PROFILE_SET_ERROR, payload: {messageError}})\r\n\r\nexport const getAuthUserData = () => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            let {id, email, login} = res.data.data\r\n            dispatch(success(id, email, login, true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | null = null): AppThunk => {\r\n    return async dispatch => {\r\n        const res = await authAPI.login(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            debugger\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            debugger\r\n            if (res.data.resultCode === 10) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            let message = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error'\r\n            dispatch(setError(message))\r\n        }\r\n\r\n    }\r\n}\r\nexport const logOut = () => async (dispatch: Dispatch<AuthActionType>) => {\r\n    try {\r\n        const res = await authAPI.logOut()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(success('', null, null, false))\r\n        }\r\n    } catch (e: any) {\r\n        console.log(e.message)\r\n    }\r\n}\r\nexport const getCaptchaUrl = () => async (dispatch: Dispatch<AuthActionType>) => {\r\n    const res = await securityAPI.getCaptcha()\r\n    dispatch(getCaptchaUrlSuccess(res.data.url))\r\n    console.log(res.data.url)\r\n\r\n}","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport {logOut} from \"../../redux/auth-reducer\";\r\nimport {getIsAuth, getLogin} from '../../redux/select'\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\n\r\nclass HeaderContainer extends React.Component<connectorType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header\r\n                {...this.props}\r\n                isAuth={this.props.isAuth}\r\n                login={this.props.login}/>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: getIsAuth(state),\r\n        login: getLogin(state),\r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToProps,  {logOut})\r\ntype connectorType = ConnectedProps<typeof connector>\r\nexport default connector(HeaderContainer)","import {ACTION_TYPE} from \"./profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport type UsersActionType = FollowAT |\r\n    UnFollowAT |\r\n    SetUsersAT |\r\n    SetCurrentPageAT |\r\n    SetTotalUserCountAT |\r\n    ToggleIsFetchingAT |\r\n    ToggleIsFollowingProgressAT |\r\n    SetFilterAT\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\nexport const initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 10,   // количество userov на одной странице\r\n    totalUsersCount: 20,  // сколько всего пользователей\r\n    currentPage: 1,   // текущая страница которую просматриваем\r\n    isFetching: false,\r\n    followingInProgress: [] as number[],//id пользователей\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ACTION_TYPE.FOLLOW_SUCCES:\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: true} : u)}\r\n\r\n        case ACTION_TYPE.UN_FOLLOW_SUCCESS:\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: false} : u)}\r\n\r\n        case ACTION_TYPE.SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case ACTION_TYPE.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case ACTION_TYPE.SET_TOTAL_USER_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n\r\n        case ACTION_TYPE.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case ACTION_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        case ACTION_TYPE.SET_FILTER: {\r\n            return {...state, filter: action.filter}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype FollowAT = {\r\n    type: ACTION_TYPE.FOLLOW_SUCCES\r\n    userID: number\r\n}\r\ntype UnFollowAT = {\r\n    type: ACTION_TYPE.UN_FOLLOW_SUCCESS\r\n    userID: number\r\n}\r\ntype SetUsersAT = {\r\n    type: ACTION_TYPE.SET_USERS\r\n    users: UserType[]\r\n}\r\ntype SetCurrentPageAT = {\r\n    type: ACTION_TYPE.SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\n\r\ntype SetTotalUserCountAT = {\r\n    type: ACTION_TYPE.SET_TOTAL_USER_COUNT\r\n    count: number\r\n}\r\n\r\ntype ToggleIsFetchingAT = {\r\n    type: ACTION_TYPE.TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\ntype ToggleIsFollowingProgressAT = {\r\n    type: ACTION_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS\r\n    userId: number\r\n    isFetching: boolean\r\n}\r\ntype SetFilterAT = {\r\n    type: ACTION_TYPE.SET_FILTER,\r\n        filter: FilterType\r\n}\r\n\r\nexport const followSucces = (userID: number): FollowAT => {    // функции AC\r\n    return {\r\n        type: ACTION_TYPE.FOLLOW_SUCCES,\r\n        userID: userID,\r\n    } as const\r\n}\r\nexport const unFollowSuccess = (userID: number): UnFollowAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.UN_FOLLOW_SUCCESS,\r\n        userID: userID\r\n    } as const\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>): SetUsersAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.SET_USERS,\r\n        users: users,\r\n    } as const\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.SET_CURRENT_PAGE,\r\n        currentPage,\r\n    } as const\r\n}\r\nexport const setTotalUserCount = (totalUsersCount: number): SetTotalUserCountAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.SET_TOTAL_USER_COUNT,\r\n        count: totalUsersCount\r\n    } as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.TOGGLE_IS_FETCHING,\r\n        isFetching,\r\n    }\r\n}\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number): ToggleIsFollowingProgressAT => {\r\n    return {\r\n        type: ACTION_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId,\r\n    } as const\r\n}\r\n\r\nexport const setFilterAC = (filter: FilterType): SetFilterAT => {\r\n    return {\r\n        type: ACTION_TYPE.SET_FILTER,\r\n       filter,\r\n    }as const\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType) => {\r\n    return async (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(setCurrentPage(page))\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setFilterAC(filter))\r\n        const data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUserCount(data.totalCount))\r\n\r\n    }\r\n}\r\n\r\nconst followUnFollow = async (dispatch: Dispatch<UsersActionType>, userId: number, method: any, actionCreator: Function) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    const response = await method(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\nexport const follow = (userId: number) => async (dispatch: Dispatch<UsersActionType>) => {\r\n    followUnFollow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSucces)\r\n}\r\n\r\nexport const unFollow = (userId: number) => async (dispatch: Dispatch<UsersActionType>) => {\r\n    followUnFollow(dispatch, userId, usersAPI.unFollow.bind(usersAPI), unFollowSuccess)\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/prelo.d7190a4c.webp\";","import React from 'react';\r\nimport prelo from '../../assets/image/prelo.webp'\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={prelo} style={{width: \"300px\"}} alt={'preloader'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","\r\nexport  default {\r\n    // Options.jsx\r\n    items_per_page: '/ page',\r\n    jump_to: 'Go to',\r\n    jump_to_confirm: 'confirm',\r\n    page: '',\r\n\r\n    // Pagination.jsx\r\n    prev_page: 'Previous Page',\r\n    next_page: 'Next Page',\r\n    prev_5: 'Previous 5 Pages',\r\n    next_5: 'Next 5 Pages',\r\n    prev_3: 'Previous 3 Pages',\r\n    next_3: 'Next 3 Pages',\r\n}\r\n","import React from \"react\";\r\nimport Pagination from \"rc-pagination\";\r\nimport localeInfo from '../../locale/en_US';\r\n\r\ntype PropsType = {\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    onPageHandler:(pageNumber: number) => void\r\n    pageSize: number\r\n\r\n}\r\nexport const Paginator: React.FC <PropsType> = props=> {\r\n    const {currentPage,totalUsersCount,onPageHandler, pageSize }=props\r\n        return(\r\n    <div className={\"pagination\"}>\r\n        <Pagination className=\"ant-pagination\"\r\n                    showTitle={true}\r\n                    defaultCurrent={currentPage}\r\n                    total={totalUsersCount}\r\n                    onChange={(e) => onPageHandler(e)}\r\n                    defaultPageSize={pageSize}\r\n                    pageSize={pageSize}\r\n                    locale={localeInfo}/>\r\n    </div>)\r\n}","export default __webpack_public_path__ + \"static/media/avatar.7bdf7b93.png\";","import React from 'react';\r\nimport s from \"./user.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport avatar from \"../../assets/image/avatar.png\";\r\nimport {UserType} from \"../../types/types\";\r\nimport style from '../../assets/common/common.module.css'\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: number[]\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n}\r\nexport const EveryUser = (props: PropsType) => {\r\n    const {user, followingInProgress, follow, unFollow,} = props\r\n\r\n    return (\r\n        <div key={user.id}\r\n             className={s.user}>\r\n            <div className={s.common}>\r\n                <NavLink className={s.photo} to={'./profile/' + user.id}>\r\n                    <img src={user.photos.small ? user.photos.small : avatar}\r\n                    alt={'photos'}/>\r\n                </NavLink>\r\n\r\n                <div className={s.followAndDescription}>\r\n                    <div className={s.left}>\r\n                        {user.followed ?\r\n                            <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                    onClick={() => {\r\n                                        unFollow(user.id);\r\n                                    }} className={style.commonBtn}>UnFollow\r\n                            </button>\r\n                            :\r\n                            <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                    onClick={() => {\r\n                                        follow(user.id)\r\n                                    }} className={style.commonBtn}>Follow\r\n                            </button>\r\n                        }\r\n\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </div>\r\n                    <div className={s.right}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\ntype FriendsType = \"null\" | \"true\" | \"false\"\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendsType\r\n}\r\nconst validateForm = (values: any) => {\r\n    const errors = {};\r\n    return errors\r\n}\r\n\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo(props => {\r\n\r\n    const submit = (values: FilterType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        (props.onFilterChanged(values))\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={{term: '', friend: null}}\r\n                validate={validateForm}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    )\r\n})\r\n","import React from \"react\";\nimport s from \"./user.module.css\"\nimport {UsersType} from \"../../types/types\";\nimport {Paginator} from \"../../assets/common/Paginator\";\nimport {EveryUser} from \"./EveryUser\";\nimport {UsersSearchForm} from \"./UsersSearchForm\";\n\nexport let Users: React.FC<UsersType> = props => {\n    return (\n        <>\n            <UsersSearchForm onFilterChanged={props.onFilterChanged}/>\n            <Paginator\n                onPageHandler={props.onPageHandler}\n                pageSize={props.pageSize}\n                totalUsersCount={props.totalUsersCount}\n                currentPage={props.currentPage}\n            />\n            <div className={s.users}>\n                {\n                    props.users.map(u => <EveryUser\n                        key={u.id}\n                        user={u}\n                        follow={props.follow}\n                        unFollow={props.unFollow}\n                        followingInProgress={props.followingInProgress}/>)\n                }\n            </div>\n        </>\n\n    )\n}\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    FilterType,\r\n    follow,\r\n    requestUsers,\r\n    setCurrentPage,\r\n    toggleIsFollowingProgress,\r\n    unFollow,\r\n} from \"../../redux/users-reducer\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport Preloader from \"../preloader/preloader\";\r\nimport {compose} from \"redux\";\r\nimport {Users} from \"./Users\";\r\nimport {UserType} from '../../types/types';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers, getUsersFilter\r\n} from '../../redux/select';\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage,pageSize, filter } = this.props\r\n        this.props.requestUsers(currentPage, pageSize, filter);\r\n    }\r\n\r\n    onPageHandler = (pageNumber: number) => {\r\n        const {pageSize, filter} = this.props\r\n        this.props.requestUsers(pageNumber, pageSize, filter)\r\n    }\r\n    onFilterChanged = (filter: FilterType)=>{\r\n        const {pageSize } = this.props\r\n        this.props.requestUsers(1, pageSize, filter)\r\n    }\r\n\r\n    render() {\r\n        const {isFetching}=this.props;\r\n        return (\r\n            <>    {isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    unFollow={this.props.unFollow}\r\n                    follow={this.props.follow}\r\n                    users={this.props.users}\r\n                    onPageHandler={this.onPageHandler}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                    onFilterChanged={this.onFilterChanged}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport type UsersPropsType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\nexport type MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n    filter: FilterType\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    follow: (userID: number) => void,\r\n    unFollow: (userID: number) => void,\r\n    setCurrentPage: (currentPage: number) => void\r\n    requestUsers: (currentPage: number, pageSize: number, filter: FilterType) => void\r\n    onFilterChanged:(filter: any)=> void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        filter: getUsersFilter(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,      // подразумевает follow: follow, где второе follow - это санки\r\n        unFollow,\r\n        setCurrentPage,\r\n        toggleIsFollowingProgress,\r\n        requestUsers: requestUsers\r\n    }),\r\n)(UsersContainer)\r\n\r\n\r\n\r\n","\r\nexport type initialStateType = {\r\n    messageForState: messageForStateType[]\r\n}\r\nexport type messageForStateType = {\r\n    id: number\r\n    message: string\r\n}\r\nconst initialState = {\r\n    messageForState:[\r\n        {id: 1, message: \"hello\"},\r\n        {id: 2, message: \"hi\"},\r\n    ]\r\n}\r\ntype actionType = {\r\n    type: \"ADD_MESSAGE\"\r\n    messageForm: string\r\n}\r\nexport const NewReducer = (state = initialState, action: actionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_MESSAGE\":\r\n            const newMessage = {\r\n                id: new Date().getTime(),\r\n                message: action.messageForm,\r\n            }\r\n            return {\r\n                ...state, messageForState: [newMessage, ...state.messageForState]\r\n            }\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const addNewMessageForm = (messageForm: string): actionType => {\r\n    return (\r\n        {\r\n            type: \"ADD_MESSAGE\",\r\n            messageForm\r\n        }\r\n    ) as const\r\n}\r\n","import {useDispatch, useSelector} from 'react-redux';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {AppStateType} from '../../redux/redux_store';\r\nimport {addNewMessageForm} from './new-reducer';\r\n\r\n\r\nconst NewForm = () => {\r\n    const dispatch = useDispatch()\r\n    const selector = useSelector((state: AppStateType) => state.new.messageForState)\r\n\r\n\r\n    let addMessageForm = (values: any) => {\r\n        dispatch(addNewMessageForm(values.inputform))\r\n    }\r\n    return (\r\n        <div>\r\n            {selector.map(s => {\r\n                return <div key={s.id}>{s.message}</div>\r\n            })}\r\n            <NewReduxForm onSubmit={addMessageForm}/>\r\n        </div>)\r\n}\r\nconst NewComponentForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                component=\"input\"\r\n                name=\"inputform\"\r\n            />\r\n            <button>Add New</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst NewReduxForm = reduxForm({form: 'newForm'})(NewComponentForm)\r\nexport default NewForm;","import {getAuthUserData} from \"./auth-reducer\"\r\nimport {ACTION_TYPE} from \"./profile-reducer\"\r\nimport {AppThunk} from \"./redux_store\"\r\n\r\ntype InitialStateType = typeof initialState\r\nconst initialState = {\r\n    inicialized: false\r\n}\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.INITIALIZED_SUCCESS:\r\n            return {...state, inicialized: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype InicializedAT = ReturnType<typeof inicializedAC>\r\nexport type AppActionsReducerType = InicializedAT\r\n\r\nexport const inicializedAC = () => {\r\n    return {\r\n        type: ACTION_TYPE.INITIALIZED_SUCCESS,\r\n    }\r\n}\r\n\r\nexport const inicializedApp = (): AppThunk => dispatch => {\r\n    let promise = dispatch(getAuthUserData())\r\n    promise.then(() => {\r\n        dispatch(inicializedAC())\r\n    })\r\n}\r\n\r\n","import React from 'react'\r\nimport {useFormik} from 'formik';\r\nimport {connect, ConnectedProps, useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\ntype FormDataType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string | null\r\n}\r\n\r\nconst validate = (values: FormDataType) => {\r\n    let errors: FormDataType = {};\r\n    if (!values.password) {\r\n        errors.password = 'Required';\r\n    } else if (values.password.length > 15) {\r\n        errors.password = 'Must be 15 characters or less';\r\n    } else if (values.password.length < 7) {\r\n        errors.password = 'Must be 7 characters or less';\r\n    }\r\n\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n\r\nexport const LoginFormik = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n    const captchaUrl = useSelector<AppStateType, string | null>(state => state.auth.captchaUrl)\r\n    const messageError = useSelector<AppStateType, string | null>(state => state.auth.messageError)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: '',\r\n\r\n        }, validate,\r\n        onSubmit: values => {\r\n            dispatch(login(values.email, values.password, values.rememberMe, values.captcha));\r\n            formik.resetForm()\r\n            console.log(values)\r\n        },\r\n    })\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>;\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <a href={'https://social-network.samuraijs.com/'}>\r\n                        </a>\r\n\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            id=\"email\"\r\n                            type=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n\r\n                        <TextField\r\n                            id=\"password\"\r\n                            type=\"password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            name=\"rememberMe\"\r\n                            onChange={formik.handleChange}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n\r\n                        {captchaUrl && <img src={captchaUrl}/>}\r\n                        {captchaUrl && <TextField\r\n                            id=\"captcha\"\r\n                            type=\"captcha\"\r\n                            {...formik.getFieldProps('captcha')}\r\n                        />}\r\n                        {messageError !== null && <div style={{color: 'red'}}>{messageError}</div>}\r\n\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n/*const mapStateToProps = (state: AppStateType) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nconst connector = connect(mapStateToProps, {login})\r\ntype  CommonType = ConnectedProps <typeof connector>\r\nexport default connector(LoginFormik);*/\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\nexport type ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n    const [editMode, setEditeMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    const activeMode = () => {\r\n        setEditeMode(true)\r\n    }\r\n    const deactiveMode = () => {\r\n        setEditeMode(false)\r\n        props.updateStatus(status)\r\n\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <>\r\n            {editMode ?\r\n                <div><input value={status}\r\n                            onChange={onChangeHandler}\r\n                            onBlur={deactiveMode}\r\n                            autoFocus/>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <h4 onDoubleClick={activeMode} style={{color: 'white'}}>Status: {props.status || '-----'}\r\n                    </h4>\r\n                </div>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/city.68b57ad7.jpg\";","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\n\r\ntype PropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport const Contacts: React.FC<PropsType> = props => {\r\n    return (\r\n        <div className={s.information}>\r\n            <div>\r\n                <b> {props.contactTitle}:\r\n                {props.contactValue ?\r\n                    <span>{props.contactValue}</span> :\r\n                    <i>no information</i>}</b></div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {ContactsType, ProfilesType} from \"../../../../types/types\";\r\nimport s from './ProfileData.module.css'\r\nimport {Contacts} from \"../Contacts\";\r\nimport style from '../../../../assets/common/common.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfilesType\r\n    isOwner: boolean\r\n    activateEditeMode: () => void\r\n}\r\nconst ProfileData = (props: PropsType) => {\r\n    const {profile, activateEditeMode, isOwner} = props\r\n    let contacts: any = profile.contacts\r\n    return (\r\n        <div className={s.info}>\r\n            {isOwner &&\r\n            <button onClick={activateEditeMode} className={style.commonBtn}>\r\n                Change data\r\n            </button>}\r\n            <h3>Обо мне</h3>\r\n\r\n            <h4>FullName:\r\n                {profile.fullName ?\r\n                    <b>{profile.fullName}</b> :\r\n                    <i> no information </i>}</h4>\r\n\r\n            <h4>Looking for a job:\r\n                {profile.lookingForAJob ?\r\n                    <b>Yes</b> : <b>No</b>}</h4>\r\n\r\n            <h4>My professional skills:\r\n                {profile.lookingForAJobDescription ?\r\n                    <b> {profile.lookingForAJobDescription} </b> :\r\n                    <div><i> no information</i></div>}</h4>\r\n\r\n            <h4>About Me: {profile.aboutMe ?\r\n                <b>{profile.aboutMe}</b> :\r\n                <div><i> no information</i></div>} </h4>\r\n\r\n            <h3>Contacts:</h3>\r\n            {Object.keys(contacts).map(c => {\r\n                return <Contacts\r\n                    key={c}\r\n                    contactTitle={c}\r\n                    contactValue={contacts[c]}/>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;","import React from 'react';\r\nimport {Field, Form, Formik,} from 'formik';\r\nimport {ProfilesType} from \"../../../../types/types\";\r\nimport * as Yup from 'yup';\r\nimport s from '../../../../assets/common/common.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfilesType\r\n    userId: string\r\n    saveProfile: (profile: ProfilesType) => void\r\n    activateEditeMode: (editMode: boolean) => void\r\n    error: string | null\r\n}\r\nconst ProfileDataForm = (props: PropsType) => {\r\n\r\n    const submit = async (values: ProfilesType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        await props.saveProfile(values)\r\n        {\r\n            if (props.error !== null)\r\n                props.activateEditeMode(true)\r\n            setSubmitting(true)\r\n        }\r\n        props.activateEditeMode(false)\r\n    }\r\n\r\n    const SignupSchema = Yup.object().shape({\r\n        fullName: Yup.string()\r\n            .min(2, 'To short')\r\n            .max(50, 'Too Long!')\r\n            .required('Required, enter correct value'),\r\n        lookingForAJobDescription: Yup.string()\r\n            .min(2, 'To short')\r\n            .max(50, 'Too Long!')\r\n            .required('Required, enter correct value'),\r\n        aboutMe: Yup.string()\r\n            .min(2, 'To short')\r\n            .max(50, 'Too Long!'),\r\n    });\r\n    const contacts: any = props.profile.contacts\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    fullName: '',\r\n                    lookingForAJobDescription: '',\r\n                    lookingForAJob: false,\r\n                    aboutMe: '',\r\n                    userId: props.userId,\r\n                    contacts: {\r\n                        facebook: '',\r\n                        youtube: '',\r\n                        website: '',\r\n                        vk: '',\r\n                        twitter: '',\r\n                        mainLink: '',\r\n                        instagram: '',\r\n                        github: ''\r\n                    },\r\n                    photos: {small: '', large: ''}\r\n                }}\r\n                onSubmit={submit}\r\n                validationSchema={SignupSchema}\r\n            >\r\n                {({errors, touched, isSubmitting}) => (\r\n                    <Form>\r\n                        <div className={s.error}>{props.error}</div>\r\n\r\n                        <Field type=\"text\" name=\"fullName\" placeholder=\"Full Name\"/>\r\n                        {errors.fullName && touched.fullName ? (\r\n                            <div>{errors.fullName}</div>) : null}\r\n\r\n                        <Field type=\"text\" name=\"lookingForAJobDescription\" placeholder={\"My professional skills\"}/>\r\n                        {errors.lookingForAJobDescription && touched.lookingForAJobDescription ? (\r\n                            <div>{errors.lookingForAJobDescription}</div>) : null}\r\n\r\n                        <div className={s.checkBox}> Looking for a job?\r\n                            <Field type=\"checkbox\" name=\"lookingForAJob\"\r\n                            />\r\n                        </div>\r\n                        <Field type=\"text\" name=\"aboutMe\" placeholder=\"aboutMe\"/>\r\n                        {errors.aboutMe && touched.aboutMe ? (\r\n                            <div>{errors.aboutMe}</div>) : null}\r\n\r\n                        {Object.keys(contacts).map(c => {\r\n                            return (\r\n                                <Field key={c} type=\"text\"\r\n                                       name={`contacts.${c}`}\r\n                                       placeholder={`${c}`}/>\r\n                            )\r\n                        })}\r\n\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Submit\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n/*   const formik = useFormik(\r\n{\r\n    initialValues: {\r\n        fullName: '',\r\n            lookingForAJob\r\n    :\r\n        false,\r\n            lookingForAJobDescription\r\n    :\r\n        '',\r\n            aboutMe\r\n    :\r\n        '',\r\n            contacts\r\n    :\r\n        {\r\n            facebook: '',\r\n                github\r\n        :\r\n            '',\r\n                instagram\r\n        :\r\n            '',\r\n                mainLink\r\n        :\r\n            '',\r\n                twitter\r\n        :\r\n            '',\r\n                vk\r\n        :\r\n            '',\r\n                website\r\n        :\r\n            '',\r\n                youtube\r\n        :\r\n            ''\r\n        }\r\n    ,\r\n        photos:{\r\n            large: null, small\r\n        :\r\n            null\r\n        }\r\n    ,\r\n        userId: ''\r\n    }\r\n,\r\n    onSubmit: (values: ProfilesType) => {\r\n        props.saveProfile(values)\r\n        // alert(JSON.stringify(values))\r\n    },\r\n}\r\n);\r\nreturn (\r\n<form onSubmit={formik.handleSubmit}>\r\n    <label htmlFor=\"fullName\">FullName</label>\r\n    <input\r\n        id=\"fullName\"\r\n        name=\"fullName\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        value={formik.values.fullName}\r\n    />\r\n\r\n    <label htmlFor=\"fullName\">lookingForAJobDescription</label>\r\n    <input\r\n        id=\"lookingForAJobDescription\"\r\n        name=\"lookingForAJobDescription\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        value={formik.values.lookingForAJobDescription}\r\n    />\r\n    <label htmlFor=\"aboutMe\">aboutMe</label>\r\n    <input\r\n        id=\"aboutMe\"\r\n        name=\"aboutMe\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        value={formik.values.aboutMe}\r\n    />\r\n\r\n    <button type=\"submit\">Submit</button>\r\n</form>\r\n);*/\r\n\r\n\r\nexport default ProfileDataForm;","import React, {useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../preloader/preloader\";\r\nimport {ProfileType} from '../../../types/types';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport avatar from \"../../../assets/image/avatar.png\";\r\nimport phone from \"../../../assets/image/city.jpg\";\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\nimport ProfileDataForm from \"./ProfileData/ProfileDataForm\";\r\n\r\n\r\nconst  ProfileInfo: React.FC<ProfileType> = props => {\r\n    const {profile, status, updateStatus, isOwner, savePhoto,userId, saveProfile, error} = props\r\n    const [editMode, setEditeMode] = useState<boolean>(false)\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onchangeImage = (e: any) => {\r\n        if (e.target.files.length)\r\n            savePhoto(e.target.files[0])\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <img src={phone} className={s.item} alt={'phone'}/>\r\n            <div className={s.block}>\r\n                <div>\r\n                    <img src={\r\n                        profile.photos.large || avatar}\r\n                         className={s.photo} alt={'photos'}\r\n                    />\r\n\r\n                    {isOwner &&\r\n\r\n                        <input type={'file'}\r\n                               onChange={onchangeImage}\r\n                               className={s.style}\r\n                        />}\r\n\r\n                    <ProfileStatusWithHooks\r\n                        status={status}\r\n                        updateStatus={updateStatus}\r\n                    />\r\n                </div>\r\n\r\n                    <div className={s.description}>\r\n                        {editMode?\r\n                            <ProfileDataForm profile={profile}\r\n                                             isOwner={isOwner}\r\n                                             userId={userId}\r\n                                             saveProfile={saveProfile}\r\n                                             error={error}\r\n                            activateEditeMode={()=>setEditeMode(false)}/> :\r\n\r\n                            <ProfileData profile={profile}\r\n                                         isOwner={isOwner}\r\n                                         activateEditeMode={()=>\r\n                                             setEditeMode(true)}/>}\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo;\r\n\r\n","import React from \"react\";\r\nimport {PostsType} from \"../../../../types/types\";\r\nimport s from \"./post.module.css\"\r\n\r\n\r\nexport const Post = (props: PostsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <p className={s.message}>{props.message}</p>\r\n            <div>\r\n                <span>like </span>{props.likeCount}\r\n                <div>\r\n                    <img src={props.img} alt={'friend'}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Post;\r\n","import React from 'react';\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostPropsType} from \"./MyPostsContainer\";\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../../assets/FormsControls';\r\n\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props: MyPostPropsType) => {\r\n\r\n    const addPost = (value: any) => {\r\n        props.addPost(value.newPost)\r\n    }\r\n    const postElements = props.posts.map(p =>\r\n        <Post\r\n            key={p.id}\r\n            id={p.id}\r\n            message={p.message}\r\n            likeCount={p.likeCount}\r\n            img={p.img}\r\n        />)\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <hr/>\r\n            {postElements}\r\n            <hr/>\r\n            <h3>My post</h3>\r\n            <PostReduxForm onSubmit={addPost} />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const PostForm = (props: any) => {\r\n\r\n    return (\r\n        <form\r\n            onSubmit={props.handleSubmit}>\r\n            <Field\r\n                name=\"newPost\"\r\n                component={Textarea}\r\n                placeholder={'enter your message'}\r\n                type={'text'}\r\n                validate={[required, maxLength10,]}/>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\nconst PostReduxForm = reduxForm({form: 'contact'})(PostForm)\r\nexport default MyPosts;\r\n","import {addPostAC, deletePostAC} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux_store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PostsType} from '../../../types/types';\r\nimport {getPosts} from '../../../redux/select'\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newMessagePost: string) => void\r\n    deletePost: (postId: number) => void\r\n}\r\n\r\nexport type MyPostPropsType = MapStatePropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: getPosts(state),\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newMessagePost: string) => {\r\n            dispatch(addPostAC(newMessagePost))\r\n        },\r\n        deletePost: (postId: number) => {\r\n            dispatch(deletePostAC(postId))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./myPosts/MyPostsContainer\";\r\nimport {ProfileType} from '../../types/types';\r\n\r\nconst Profile = (props: ProfileType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                userId={props.userId}\r\n                saveProfile={props.saveProfile}\r\n                error={props.error}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {getUserStatus, savePhoto, saveProfile, setUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from '../../hoc/WithAuthRedirects';\r\nimport {PhotosType, ProfilesType} from '../../types/types';\r\nimport {getError, getId, getIsAuth, getProfile, getStatus} from '../../redux/select'\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\ntype ProfilePropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId; // чужая страница\r\n        if (!userId) {\r\n            userId = this.props.id\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.setUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                isOwner={!this.props.match.params.userId}\r\n                savePhoto={this.props.savePhoto}\r\n                userId={this.props.id}\r\n                saveProfile={this.props.saveProfile}\r\n                error={this.props.error}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfilesType | null\r\n    status: string\r\n    id: string\r\n    isAuth: boolean\r\n    error: string | null\r\n}\r\ntype mapDispatchToPropsType = {\r\n    setUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (image: PhotosType) => void\r\n    saveProfile:(profile: ProfilesType)=> void\r\n}\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profile: getProfile(state),\r\n        status: getStatus(state),\r\n        isAuth: getIsAuth(state),\r\n        id: getId(state),\r\n        error: getError(state),\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfile, getUserStatus, updateStatus, savePhoto,saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Music\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport NewForm from './components/New/New';\nimport {AppStateType} from './redux/redux_store';\nimport Preloader from './components/preloader/preloader';\nimport {inicializedApp} from './redux/app-reducer'\nimport {Route, Redirect, Switch} from 'react-router';\nimport {connect, ConnectedProps} from 'react-redux';\nimport {WithSuspense} from \"./hoc/WithSuspense\";\nimport {LoginFormik} from \"./components/Login/LoginFormik\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\n\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\n\nclass App extends React.Component<ConectedType> {\n\n    componentDidMount() {\n        this.props.inicializedApp()\n    }\n    render() {\n        if (!this.props.inicialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className=\"app-wrapper-content\">\n                    <Switch>\n                        <Route exact path=\"/\" render={() =><ProfileContainer/>}/>\n                    <Route exact path=\"/profile\" render={() =><ProfileContainer/>}/>\n                    <Route path=\"/dialogs\"\n                           render={WithSuspense(DialogsContainer)}/>\n                    <Route path=\"/users\" render={() =>\n                        <UsersContainer/>}/>\n                    <Route path=\"/new\" render={() => <NewForm/>}/>\n                    <Route path=\"/music\" component={Music}/>\n                    <Route path=\"/settings\" component={Settings}/>\n                    <Route path=\"/friends\" render={() => <div>Friends</div>}/>\n                    <Route path=\"/login\" component={LoginFormik}/>\n                    <Route path=\"*\" render={() => <h2 style={{color:'red'}}>404 PAGE NOT FOUND</h2>}/>\n                    </Switch>\n                </div>\n            </div>)\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        inicialized: state.app.inicialized,\n    }\n}\nlet connector = connect(mapStateToProps, {inicializedApp})\ntype ConectedType = ConnectedProps<typeof connector>\nexport default connector(App)\n\n\n","import React, {ComponentType} from 'react';\r\nimport Preloader from \"../components/preloader/preloader\";\r\n\r\nexport function WithSuspense<T>(Component: ComponentType<T>) {\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props as T}/>\r\n        </React.Suspense>\r\n    }\r\n}\r\n\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {ProfileActionType, profileReducer} from \"./profile-reducer\";\r\nimport {DialogActionType, dialogsReducer} from \"./dialogs-reducer\";\r\nimport {UsersActionType, usersReducer} from \"./users-reducer\";\r\nimport {AuthActionType, authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleWare, {ThunkAction} from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {NewReducer} from \"../components/New/new-reducer\";\r\nimport {AppActionsReducerType, appReducer} from \"./app-reducer\";\r\n\r\n/*export type ActionsType =\r\n    ReturnType<typeof addPostAC> |\r\n    ReturnType<typeof changeTextareaAC> |\r\n    ReturnType<typeof upDateNewMessageTextAC> |\r\n    ReturnType<typeof sendMessageAC>*/\r\n\r\n\r\nlet rootReducer = combineReducers({              //rootReducer возвращает state\r\n    profilePage: profileReducer,  //это наш целый стэйт\r\n    dialogsPage: dialogsReducer,  // ключ: значение\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    new: NewReducer,\r\n    app: appReducer,\r\n})\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>   //  ReturnType -> дай мне  возвращаемый тип rootReducera\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\nexport type AppActionsType =\r\n    AppActionsReducerType | AuthActionType |\r\n    DialogActionType | ProfileActionType |\r\n    UsersActionType\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose   //подключили redux vtool\r\nexport let store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleWare)))\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from './redux/redux_store';\n\nconsole.log(React.version);\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {PhotosType, ProfilesType, UserType} from \"../types/types\";\r\nimport axios from \"axios\";\r\nimport {SaveProfileType} from \"../redux/profile-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"f499194a-9fc7-4a05-a45f-a1732e1abd57\"\r\n    }\r\n});\r\n\r\nexport type ResponseUserType<T = {}> = {\r\n    items: T\r\n    totalCount: number\r\n    error: number\r\n}\r\n\r\nexport type CommonType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[],\r\n    data: T\r\n}\r\n\r\n\r\nexport type AuthMeType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n}\r\nexport const usersAPI = {\r\n    getUsers: (currentPage: number = 10, pageSize: number = 100, term: string = '', friend: boolean | null = null) => {\r\n        return instance.get<ResponseUserType<UserType[]>>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend !== null ? `&friend=${friend}` : ''))\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: string | number) {\r\n        return instance.post<CommonType>(`follow/` + userId, {}, {})\r\n\r\n    }, unFollow(userId: string | number) {\r\n        return instance.delete<CommonType>(`follow/` + userId, {})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<CommonType<AuthMeType>>(`auth/me`, {})\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n        return instance.post<CommonType<{ userId: number }>>(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logOut() {\r\n        return instance.delete<CommonType>(`auth/login`, {})\r\n    }\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: string) {\r\n        return instance.get<ProfilesType>(`profile/` + userId,\r\n        )\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<any>(`profile/status/` + userId,)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonType>(`profile/status`, {status: status})\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        let formData = new FormData();\r\n        formData.append('image', photoFile);\r\n        return instance.put<CommonType<{ photos: PhotosType }>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: ProfilesType) {\r\n        return instance.put<CommonType<{ profile: ProfilesType }>>(`profile`, profile)\r\n    }\r\n}\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<any>(`security/get-captcha-url`)\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3K0cN\",\"item\":\"Navbar_item__1jhJx\",\"activeLink\":\"Navbar_activeLink__3vpt0\",\"post\":\"Navbar_post___jI8L\",\"active\":\"Navbar_active__2IHiz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FormsControls_container__dDYNt\",\"formControl\":\"FormsControls_formControl__10mJD\",\"error\":\"FormsControls_error__3qrXj\",\"commonsError\":\"FormsControls_commonsError__DK9Qs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"user_users__2App8\",\"common\":\"user_common__2UQBs\",\"photo\":\"user_photo__4u11O\",\"left\":\"user_left__1WqlW\",\"right\":\"user_right__3Ez0v\",\"followAndDescription\":\"user_followAndDescription__3N32K\",\"selected\":\"user_selected__1aSrd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"commonBtn\":\"common_commonBtn__3Wss5\",\"checkBox\":\"common_checkBox__BCKqq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProfileInfo_item__29wpQ\",\"block\":\"ProfileInfo_block__3_8SH\",\"photo\":\"ProfileInfo_photo__11qFv\",\"avatar\":\"ProfileInfo_avatar__2virw\",\"description\":\"ProfileInfo_description__vcMX2\",\"information\":\"ProfileInfo_information__2eUl7\",\"status\":\"ProfileInfo_status__3kAsK\"};"],"sourceRoot":""}